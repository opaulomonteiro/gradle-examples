plugins {
    id 'org.asciidoctor.convert' version '1.5.6' apply false
}

allprojects {
    repositories {
        jcenter()
    }
}

subprojects {
    version = '1.0'
}

configure(subprojects.findAll { it.name == 'greeter' || it.name == 'greeting-library' }) {

    apply plugin: 'groovy'

    dependencies {
        testCompile 'org.spockframework:spock-core:1.0-groovy-2.4', {
            exclude module: 'groovy-all'
        }
    }
}

//////////////////////      Creating Plugin Examples        /////////////////////


//////////////////////      NO CONFIGURATION         /////////////////////
class GreetingPluginWithoutConfigurable implements Plugin<Project> {
    void apply(Project project) {
        project.task('helloNoConfiguration') {
            doLast {
                println 'Hello from the GreetingPluginWithoutConfigurable'
            }
        }
    }
}

// Apply the plugin
apply plugin: GreetingPluginWithoutConfigurable



//////////////////////      WITH CONFIGURATION      /////////////////////
class GreetingPluginExtension {
    String message = 'Hello from GreetingPlugin'
}

class GreetingPluginWithConfiguration implements Plugin<Project> {
    void apply(Project project) {
        // Add the 'greeting' extension object
        def extension = project.extensions.create('greetingWithConfiguration', GreetingPluginExtension)
        // Add a task that uses configuration from the extension object
        project.task('helloWithConfiguration') {
            doLast {
                println extension.message
            }
        }
    }
}

apply plugin: GreetingPluginWithConfiguration

// Configure the extension
greetingWithConfiguration.message = 'Hi from Gradle'



//////////////////////      WITH CLOSURE CONFIGURATION    /////////////////////
class GreetingPluginExtensionClosuse {
    String message
    String greeter
}

class GreetingPluginWithClosure implements Plugin<Project> {
    void apply(Project project) {
        def extension = project.extensions.create('greetingWithClosure', GreetingPluginExtensionClosuse)
        project.task('helloWithClosure') {
            doLast {
                println "${extension.message} from ${extension.greeter}"
            }
        }
    }
}

apply plugin: GreetingPluginWithClosure

// Configure the extension using a DSL block
greetingWithClosure {
    message = 'Hi'
    greeter = 'Gradle'
}